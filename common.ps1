#### GLOBAL VARIABLES ####

# name of the local machine
$pcName = $env:COMPUTERNAME
# username of the currently logged-in user
$username = $env:USERNAME
# system drive
$sysDrive = $env:SystemDrive
# path to Program Files
$programFiles = $env:ProgramFiles
# path to Program Files(x86)
$programFiles86 = ${env:ProgramFiles(x86)}
# path to store user-specific preferences ([USER PROFILE PATH]\AppData\Roaming)
$configPath = $env:APPDATA
# system temp folder
$temp = $env:TEMP
# network path to pull client files from
$installSrc = null
# path on local machine to extract client files to
$installDest = null
# path of client root folder
$parentFolder = "$installDest\Redfern IT"

## installation wizard preferences ##
# PS modules required by client - options: PSWindowsUpdate, ActiveDirectory, Microsoft.PowerShell.SecretManagement, Microsoft.PowerShell.SecretStore, Autologon
$dependencies = null
# enable/disable autologon with admin credentials
$useAutologon = null
# enable/disable creation of log at runtime
$createLog = null
# enable/disable creation of scheduled task
$schedTask = null

#### INSTALLATION FUNCTION DEFINITIONS ####

function Get-Preferences() {
  # prompt

  # dependencies preferences
  if ($dependencies[0] -notcontains "null") {
    for ($i -eq 0; $i -le $dependencies.Count; $i++) {
      Install-Module -Name $dependencies[$i] -AcceptLicense -Scope AllUsers -AllowClobber -Force
      # update array
    }
  }
  else {
    # update array
  }

  # autologon preferences
  if ($useAutologon -eq $true) {
    $adminUsername = Read-Host ; $adminPassword = Read-Host -AsSecureString
    Import-Module -Name Microsoft.PowerShell.SecretManagement, Microsoft.PowerShell.SecretStore
    # update array

    # configure vault - scope is set to CurrentUser
    Set-SecretStorePassword
    Register-SecretVault -ModuleName Microsoft.PowerShell.SecretStore -Name SecretStore -DefaultVault -Verbose
    Set-Secret -Name ADMIN_USERNAME -Secret $adminUsername ; Set-Secret -Name ADMIN_PASSWORD -Secret $adminPassword
  }

  if ($createLog -eq $true) {
    # create log at $temp
  }

  # install

  if ($schedTask -eq $true) {
    # create scheduled task
  }

}

# checks that $installSrc and $installDest are valid
function Verify-Paths() {
    
}

# copies files from $installSrc to $installDest, creates $parentFolder and its subdirectories, and installs $dependencies
function Install-Client() {
    
}

# deletes temporary files generated by install and moves install log file to $parentFolder\logs
function Install-Cleanup() {
    
}